module std

`ToStr defines any data that can be converted to a str
trait ToStr(
  fn toStr(): Str
)

`A str is an array of contiguous data stored in memory with a null termination using hex 0x00 or ASCII 0x00.
`It is immutable and cannot be modified. It is copied for any changes and saved to a new memory location.
`The previous str is freed if its reference count is 0 within the block.
record Str(data: Buffer): Comparable, ToStr {
  fn get(i: int) {
    return data.get(i)
  }

  fn contains(search: Str) -> Bool {
    pass
  }

  fn index_of(sub: Str) -> Int { 
    pass
  }

  fn test(pattern: Regex) -> Bool {
    pass
  }

  fn search(key: Str) -> (Int, Bool) {
    val (low, mid, high) = (0, 0, n.numItems)
    while low < high {
      mid = (low + high) / 2
      val cmp := key > n.items[mid].key
      low = cmp > 0 ? mid + 1 : low
      high = cmp < 0 ? mid : high
      if cmp == 0 {
        return (mid, True)
      }
    }
    return (low, False)
  }
}

fn (t BTree) delete(key str): bool =
	if t.root == nil
		return false
	deletedItem := t.root.delete(key, false)
	if t.root.numItems == 0
		if t.root.isLeaf()
			t.root = nil
		else
			t.root = t.root.children[0]
	if deletedItem != nil
		return true
	return false

fn (str) starts_with(search: str): bool =
  pass

fn (str) concat(other: str): str =
  s + other

fn (str) to_str(): str = s

fn (str) concat(other: str): str =
  s + s

fn (str) starts_with(search: str): bool =
  pass

fn (str) ends_with(search: str): bool =
  pass

fn (str) contains(search: str): bool =
  pass

fn (str) index_of(sub: str): int =
  pass

fn (str) match(pattern: Regex): []str =
  pass

fn (str) match_all(pattern: Regex): []str =
  pass

fn (str) pad_start(sub: str, count: int): str =
  pass

fn (str) pad_end(sub: str, count: int): str =
  pass

fn (str) repeat(count: int): str =
  pass

fn (str) replace(pattern: Regex, sub: str): str =
  pass

fn (str) replace_all(pattern: Regex, sub: str): str =
  pass

fn (str) search(pattern: Regex): str =
  pass

fn slice(start: int, end: int): str =
  pass

fn split(separator: str, limit: int): []str =
  pass

fn sub(start: int, end: int): str =
  pass

fn to_lower(): str =
  pass

fn to_upper(): str =
  pass

fn trim(): str =
  pass

fn trim_start(): str =
  pass

fn trim_end(): str =
  pass

fn reverse(): str
  """reverses a str
  start := 0
  end := length - 1
  result := []
  while start < end
    const temp = data[start]
    result[start] = data[end]
    result[end] = temp
    end = end - 1
    start = start + 1
  result

fn parseInt(): int! =
  0

fn parseFloat(): float! =
  0.0

fn parseBool(): bool! =
  match to_lower()
    "true" -> bool::true
    "false" -> bool::false
    _ -> error("could not parse bool '${this}'")


_.camelCase
_.capitalize
_.deburr
_.endsWith
_.escape
_.escapeRegExp
_.kebabCase
_.lowerCase
_.lowerFirst
_.pad
_.padEnd
_.padStart
_.parseInt
_.repeat
_.replace
_.snakeCase
_.split
_.startCase
_.startsWith
_.template
_.toLower
_.toUpper
_.trim
_.trimEnd
_.trimStart
_.truncate
_.unescape
_.upperCase
_.upperFirst
_.words
