module sample

import std.{List, Map, Math, Random}

Int.random()
Float.random()
Float.PI

User = {
  name: Str
  email: Str
  todos: List(Todo)
}

Todo = {
  title: Str
}

User()
  .name("John Doe")
  .email("john@example.com")
  .todo(Todo().title("Make pizza"))
  .todo(Todo().title("Finish Toasty"))
  .todo(Todo().title("Sleep"))

stoplightColor(something: Int) -> Color =
  if something > 0
      Red
  else if something == 0
      Yellow
  else
      Green

Response = {
  body: Buffer = emptyBuffer()
  headers: Map(Str, Str) = emptyMap()
  status: Int = 0
}

main() -> Unit =
  printLn("123")

main() -> Int, Err =
    Stdout.line! "There are $(total) animals."

# calculate to str
Int\toStr() -> Str =
  todo

Int::random() -> Int =
  24

sub(arg1: Int, arg2: Int) -> Int =
  local1 = arg1
  local2 = arg2
  local1 - local2

addAndStringify(num1: Int, num2: Int) -> Str =
  (num1 + num2).toStr()

factorial(x: Int) -> Int =
  if x < 2
    x
  else
    x * factorial(x - 1)

Result(a, b) =
 | Ok(a)
 | Err(b)

```
Checks whether the result is an `Ok` value
isOk(Ok(1)) # => True
isOk(Err(Nil)) # => False
```
Result\isOk() -> Bool =
  r! # will bubble back the result similar to try catch
  o! # will bubble back the option/result
  if self == Ok(v) then
    True
  else if self == Err(_) then
    False

birds = 3
iguanas = 2
total = addAndStringify(birds, iguanas)

pluralize(singular: Str, plural: Str, count: Int) -> Str =
  countstr = Num.toStr(count)
  if count == 1 then
    "$(countstr) $(singular)"
  else
    "$(countstr) $(plural)"

pluralize_test(t: Test) -> Unit =
  assert pluralize("cactus", "cacti", 1) == "1 cactus"
  assert pluralize("cactus", "cacti", 2) == "2 cacti"

User = {
  name: String
  age: String
}

user = User(1, 2, 3)
params = Map("one" => 1, "two" => 2, "three" => 3)
arr = List(1, 2, 3, 4)

User\isAuthorized() -> Bool =
  False

User\map(cb: (a: User) -> b) -> b =
  cb(u)

name(data: Option(Str)) -> Str =
  if data == Some(v) then
    v.subString(0, 3)
  else if a ==  b then
    "123"
  else
    "1231"

delta(data: Option(Str)) -> Str =
  if data == Some(v)
    v.subString(0, 3)
  else if a == b
    "123"
  else
    if a < 100
      printLn("Data")
    else
      println("No Data")


data.price?.takeIf(\a -> a != "")
(1 + 2).mod(3).pow(2).sqrt()

if v == None
  error.Error
else if v == Some(c)
  c * 20

match v
  None -> error.Error 
  Some(c) -> c * 20

names = ["Sam", "Lee", "Ari"]
names.append("Jess")
names.map(\num -> num * 2)

module std/http

import std/path
import std/os
import std/http/content_type
import std/libc

extern sqrt(x: libc.Double) -> libc.Double
extern pow(x: libc.Double, y: libc.Double) -> libc.Double

WriteError = EOF | Closed

Writer = (
	write(p: Str | Buffer) -> Int | WriteError
)

ReadError = EOF | Closed

Reader = (
	read(p: Str | Buffer) -> Int | ReadError
)

IO = Reader + Writer
IOError = ReadError | WriteError

Response(
  headers: Map[Str, Str]
  body: Str | Buffer | IO
  status: Int
)

createFileResponse(path: Str) -> Response | IOError =
  content := content_type.fromExt(path.ext())
  data := os.readFile(file)?
  Response()
    .header("Content-Type", content)
    .body(data)
    .status(200)

index() -> Response =
  createFileResponse("index.html")

serveFile(file: Str) -> Response | IOError =
  ext := path::ext(file)
  content := contentTypeFromExt(ext)
  data := os.readFile(file)?
  Response()
    .header("Content-Type", content)
    .body(data)
    .status(200)

http.createFileResponse("./src/sample.plum")
http.index()
http.serveFile("./src/sample.plum")

g = Greeter(name: "abc")
g = Greeter(...g, name: "123")