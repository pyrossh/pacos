================================================================================
record - simple
================================================================================

record Cat(name: Str, age:  Int)

record Dog(
  name: Str,
  age:  Int
)

--------------------------------------------------------------------------------

(source
  (record
    (typename)
    (record_field
      (identifier)
      (type
        (typename)))
    (record_field
      (identifier)
      (type
        (typename))))
  (record
    (typename)
    (record_field
      (identifier)
      (type
        (typename)))
    (record_field
      (identifier)
      (type
        (typename)))))

================================================================================
type - generic
================================================================================

record Dog<A, B>(
  name: A,
  age:  B
)

record Dog<A: Compare + String, B>(
  name: A,
  age:  B
)
--------------------------------------------------------------------------------

(source
  (record
    (typename)
    (generics
      (generic_type
        (genericname))
      (generic_type
        (genericname)))
    (record_field
      (identifier)
      (type
        (typename)))
    (record_field
      (identifier)
      (type
        (typename))))
  (record
    (typename)
    (generics
      (generic_type
        (genericname)
        (typename)
        (typename))
      (generic_type
        (genericname)))
    (record_field
      (identifier)
      (type
        (typename)))
    (record_field
      (identifier)
      (type
        (typename)))))

================================================================================
record - doc_comment
================================================================================

`A Cat is new a new type of animal
record Cat(name: Str, age:  Int)
--------------------------------------------------------------------------------

(source
  (record
    (doc_comment)
    (typename)
    (record_field
      (identifier)
      (type
        (typename)))
    (record_field
      (identifier)
      (type
        (typename)))))

================================================================================
record - implements
================================================================================

record Cat(
  name: Option<Str>,
  age: Int
): Stringable {
 
}

--------------------------------------------------------------------------------

(source
  (record
    (typename)
    (record_field
      (identifier)
      (type
        (typename)
        (typename)))
    (record_field
      (identifier)
      (type
        (typename)))
    (typename)))

================================================================================
record - methods
================================================================================

record Cat(
  name: Str,
  age: Int
) {

  static fn withName(name: Str): Cat {
    return Cat(name = name, age = 0)
  }

  static fn withAge(age: Int): Cat {
    return Cat(name = "", age = age)
  }

  fn fullname(): Str {
    return "${name} ${age}"
  }

  override fn toStr(): Str {
    return "Cat<${fullname()}, ${age}>"
  }

  override fn plus(other: Cat): Cat {
    return Cat(name = self.name, age = age)
  }
}

--------------------------------------------------------------------------------

(source
  (record
    (typename)
    (record_field
      (identifier)
      (type
        (typename)))
    (record_field
      (identifier)
      (type
        (typename)))
    (fn
      (fn_modifier)
      (fnname)
      (param
        (identifier)
        (type
          (typename)))
      (return_type
        (typename))
      (body
        (return
          (expression
            (primary_expression
              (call
                (reference
                  (typename))
                (argument_list
                  (keyword_argument
                    (identifier)
                    (expression
                      (primary_expression
                        (identifier))))
                  (keyword_argument
                    (identifier)
                    (expression
                      (primary_expression
                        (integer)))))))))))
    (fn
      (fn_modifier)
      (fnname)
      (param
        (identifier)
        (type
          (typename)))
      (return_type
        (typename))
      (body
        (return
          (expression
            (primary_expression
              (call
                (reference
                  (typename))
                (argument_list
                  (keyword_argument
                    (identifier)
                    (expression
                      (primary_expression
                        (string))))
                  (keyword_argument
                    (identifier)
                    (expression
                      (primary_expression
                        (identifier)))))))))))
    (fn
      (fnname)
      (return_type
        (typename))
      (body
        (return
          (expression
            (primary_expression
              (string
                (quoted_content)))))))
    (fn
      (fn_modifier)
      (fnname)
      (return_type
        (typename))
      (body
        (return
          (expression
            (primary_expression
              (string
                (quoted_content)))))))
    (fn
      (fn_modifier)
      (fnname)
      (param
        (identifier)
        (type
          (typename)))
      (return_type
        (typename))
      (body
        (return
          (expression
            (primary_expression
              (call
                (reference
                  (typename))
                (argument_list
                  (keyword_argument
                    (identifier)
                    (expression
                      (primary_expression
                        (attribute
                          (primary_expression
                            (self))
                          (identifier)))))
                  (keyword_argument
                    (identifier)
                    (expression
                      (primary_expression
                        (identifier)))))))))))))
