================================================================================
assign - Expression
================================================================================

sum = 1 + ((2 * 3) / 4)

--------------------------------------------------------------------------------

(source
  (assign
    (identifier)
    (expression
      (primary_expression
        (binary_operator
          (primary_expression
            (integer))
          (primary_expression
            (parenthesized_expression
              (expression
                (primary_expression
                  (binary_operator
                    (primary_expression
                      (parenthesized_expression
                        (expression
                          (primary_expression
                            (binary_operator
                              (primary_expression
                                (integer))
                              (primary_expression
                                (integer)))))))
                    (primary_expression
                      (integer))))))))))))

================================================================================
assign - Not
================================================================================

enabled = !False

--------------------------------------------------------------------------------

(source
  (assign
    (identifier)
    (expression
      (not_operator
        (expression
          (primary_expression
            (type_identifier)))))))

================================================================================
assign - Boolean expression
================================================================================

open = (count > 10) && (enabled == True) || (debug == False)

--------------------------------------------------------------------------------

(source
  (assign
    (identifier)
    (expression
      (boolean_operator
        (expression
          (boolean_operator
            (expression
              (primary_expression
                (parenthesized_expression
                  (expression
                    (comparison_operator
                      (primary_expression
                        (identifier))
                      (primary_expression
                        (integer)))))))
            (expression
              (primary_expression
                (parenthesized_expression
                  (expression
                    (comparison_operator
                      (primary_expression
                        (identifier))
                      (primary_expression
                        (type_identifier)))))))))
        (expression
          (primary_expression
            (parenthesized_expression
              (expression
                (comparison_operator
                  (primary_expression
                    (identifier))
                  (primary_expression
                    (type_identifier)))))))))))

================================================================================
assign - Call list
================================================================================

countriesList = listOf("US", "INDIA", "CANADA")
a = list.of(1, 2, 3)
b = list.of(list.of(1), list.of(2), list.of(3))
c = list.of(1, 2, 3 * 4, 8, n)

--------------------------------------------------------------------------------

(source
  (assign
    (identifier)
    (expression
      (primary_expression
        (call
          (reference
            (identifier))
          (argument_list
            (expression
              (primary_expression
                (string
                  (string_start)
                  (string_content)
                  (string_end))))
            (expression
              (primary_expression
                (string
                  (string_start)
                  (string_content)
                  (string_end))))
            (expression
              (primary_expression
                (string
                  (string_start)
                  (string_content)
                  (string_end)))))))))
  (assign
    (identifier)
    (expression
      (primary_expression
        (call
          (reference
            (identifier)
            (identifier))
          (argument_list
            (expression
              (primary_expression
                (integer)))
            (expression
              (primary_expression
                (integer)))
            (expression
              (primary_expression
                (integer))))))))
  (assign
    (identifier)
    (expression
      (primary_expression
        (call
          (reference
            (identifier)
            (identifier))
          (argument_list
            (expression
              (primary_expression
                (call
                  (reference
                    (identifier)
                    (identifier))
                  (argument_list
                    (expression
                      (primary_expression
                        (integer)))))))
            (expression
              (primary_expression
                (call
                  (reference
                    (identifier)
                    (identifier))
                  (argument_list
                    (expression
                      (primary_expression
                        (integer)))))))
            (expression
              (primary_expression
                (call
                  (reference
                    (identifier)
                    (identifier))
                  (argument_list
                    (expression
                      (primary_expression
                        (integer))))))))))))
  (assign
    (identifier)
    (expression
      (primary_expression
        (call
          (reference
            (identifier)
            (identifier))
          (argument_list
            (expression
              (primary_expression
                (integer)))
            (expression
              (primary_expression
                (integer)))
            (expression
              (primary_expression
                (binary_operator
                  (primary_expression
                    (integer))
                  (primary_expression
                    (integer)))))
            (expression
              (primary_expression
                (integer)))
            (expression
              (primary_expression
                (identifier)))))))))

================================================================================
assign - Call map
================================================================================

countryCode = mapOf(
  "in" => "INDIA",
  "us" => "United States",
  "ca" => "Canada"
)
a = mapOf("a" => 1, "b" => 2)
b = mapOf("a" => 1, "b" => map.of("c" => 3, "d" => 4))

--------------------------------------------------------------------------------

(source
  (assign
    (identifier)
    (expression
      (primary_expression
        (call
          (reference
            (identifier))
          (argument_list
            (pair_argument
              (string
                (string_start)
                (string_content)
                (string_end))
              (expression
                (primary_expression
                  (string
                    (string_start)
                    (string_content)
                    (string_end)))))
            (pair_argument
              (string
                (string_start)
                (string_content)
                (string_end))
              (expression
                (primary_expression
                  (string
                    (string_start)
                    (string_content)
                    (string_end)))))
            (pair_argument
              (string
                (string_start)
                (string_content)
                (string_end))
              (expression
                (primary_expression
                  (string
                    (string_start)
                    (string_content)
                    (string_end))))))))))
  (assign
    (identifier)
    (expression
      (primary_expression
        (call
          (reference
            (identifier))
          (argument_list
            (pair_argument
              (string
                (string_start)
                (string_content)
                (string_end))
              (expression
                (primary_expression
                  (integer))))
            (pair_argument
              (string
                (string_start)
                (string_content)
                (string_end))
              (expression
                (primary_expression
                  (integer)))))))))
  (assign
    (identifier)
    (expression
      (primary_expression
        (call
          (reference
            (identifier))
          (argument_list
            (pair_argument
              (string
                (string_start)
                (string_content)
                (string_end))
              (expression
                (primary_expression
                  (integer))))
            (pair_argument
              (string
                (string_start)
                (string_content)
                (string_end))
              (expression
                (primary_expression
                  (call
                    (reference
                      (identifier)
                      (identifier))
                    (argument_list
                      (pair_argument
                        (string
                          (string_start)
                          (string_content)
                          (string_end))
                        (expression
                          (primary_expression
                            (integer))))
                      (pair_argument
                        (string
                          (string_start)
                          (string_content)
                          (string_end))
                        (expression
                          (primary_expression
                            (integer)))))))))))))))
