================================================================================
fn - no return
================================================================================

fn sum(a: Int, b: Int) {
}

--------------------------------------------------------------------------------

(source
  (fn
    (fnname)
    (param
      (identifier)
      (type
        (typename)))
    (param
      (identifier)
      (type
        (typename)))
    (body)))

================================================================================
fn - return
================================================================================

fn sum(a: Int, b: Int) -> Int {
}

--------------------------------------------------------------------------------

(source
  (fn
    (fnname)
    (param
      (identifier)
      (type
        (typename)))
    (param
      (identifier)
      (type
        (typename)))
    (return_type
      (typename))
    (body)))

================================================================================
fn - default value
================================================================================

fn random(a: Int = 10) -> Int {
}

--------------------------------------------------------------------------------

(source
  (fn
    (fnname)
    (param
      (identifier)
      (type
        (typename))
      (expression
        (primary_expression
          (integer))))
    (return_type
      (typename))
    (body)))

================================================================================
fn - doc_comment
================================================================================

`converts f in fahrenheit to celsius to a value
fn toCelsius(f: Float) -> Float {
}

--------------------------------------------------------------------------------

(source
  (fn
    (doc_comment)
    (fnname)
    (param
      (identifier)
      (type
        (typename)))
    (return_type
      (typename))
    (body)))

================================================================================
fn - annotation
================================================================================

@get(method = "POST", route = "/posts")
fn createPostAction(req: Request) -> Response {
}

@get("/posts")
fn fetchAllPosts(req: Request) -> Response {
}

--------------------------------------------------------------------------------

(source
  (fn
    (decorator
      (reference
        (identifier))
      (argument_list
        (keyword_argument
          (identifier)
          (expression
            (primary_expression
              (string
                (quoted_content)))))
        (keyword_argument
          (identifier)
          (expression
            (primary_expression
              (string
                (quoted_content)))))))
    (fnname)
    (param
      (identifier)
      (type
        (typename)))
    (return_type
      (typename))
    (body))
  (fn
    (decorator
      (reference
        (identifier))
      (argument_list
        (expression
          (primary_expression
            (string
              (quoted_content))))))
    (fnname)
    (param
      (identifier)
      (type
        (typename)))
    (return_type
      (typename))
    (body)))

================================================================================
fn - generics
================================================================================

add[T: Int, Q: String + Compare](a: List[T], b: List[Q]) -> List[T] {
}

--------------------------------------------------------------------------------

(source
  (fn
    (fnname)
    (generics
      (generic_type
        (genericname)
        (typename))
      (generic_type
        (genericname)
        (typename)
        (typename)))
    (param
      (identifier)
      (type
        (typename)
        (typename)))
    (param
      (identifier)
      (type
        (typename)
        (typename)))
    (return_type
      (typename)
      (generics
        (generic_type
          (genericname))))
    (body)))
